#!/bin/bash
## OptimLib config script

# inputs
while getopts b:cm:o:p option; do
    case "${option}" in
        b) OPTIM_BUILD=${OPTARG};;
        c) OPTIM_COVERAGE="y";;
        m) OPTIM_MATRIX_OPS=${OPTARG};;
        o) OPTIM_OPT=${OPTARG};;
        p) OPTIM_PARALLEL="y";;
    esac
done

if [ -z ${CC+x} ]; then 
    CC=gcc
fi
if [ -z ${CXX+x} ]; then 
    CXX=g++
fi
if [ -z ${FC+x} ]; then 
    FC=gfortran
fi

if [[ !(-z ${KEITH_DEV_SETTINGS+x}) ]]; then
    CC=gcc-mp-7
    CXX=g++-mp-7
    FC=gfortran-mp-7
fi

# compiler checks

IS_DARWIN=$($CXX -dumpmachine 2>&1 | grep -i -c "darwin")
APPLE_COMPILER=$($CXX --version 2>&1 | grep -i -c -E 'apple llvm')

IS_FAST_OPT=0

# announcements

echo ""
if [[ "${OPTIM_BUILD}" == "dev" ]]; then
    echo "Optim: dev version"
fi

if [[ "${OPTIM_COVERAGE}" == "y" ]]; then 
    echo "Optim: coverage build"
fi

# get working directory
WDIR=${PWD}

# look for Armadillo
if [ -z ${ARMA_INCLUDE_PATH+x} ]; then
    echo ""
    if [ -f ${WDIR}/include/armadillo ]; then 
        ARMA_INCLUDE_PATH="./include"
    elif [ -f /usr/include/armadillo ]; then
        ARMA_INCLUDE_PATH="/usr/include"
    elif [ -f /usr/local/include/armadillo ]; then
        ARMA_INCLUDE_PATH="/usr/local/include"
    elif [ -f /opt/include/armadillo ]; then
        ARMA_INCLUDE_PATH="/opt/include"
    elif [ -f /opt/local/include/armadillo ]; then
        ARMA_INCLUDE_PATH="/opt/local/include"
    else 
        echo "Optim: cannot find armadillo files. Cloning from GitHub"
        echo ""

        mkdir ${WDIR}/arma_tmp
        git clone -b unstable --single-branch https://github.com/conradsnicta/armadillo-code ${WDIR}/arma_tmp
        mv ${WDIR}/arma_tmp/include/* ${WDIR}/include
        rm -rf ${WDIR}/arma_tmp
        ARMA_INCLUDE_PATH="./include"

        echo ""
    fi
fi

echo "Optim: ARMA_INCLUDE_PATH set to ${ARMA_INCLUDE_PATH}"

# set build and optimization flags

if [[ "${OPTIM_COVERAGE}" == "y" ]]; then 
    OPTIM_OPT_FLAGS="-g -O0 -Wall --coverage -fno-inline -fno-inline-small-functions -fno-default-inline"
else
    if [[ "${OPTIM_OPT}" == "fast" ]]; then
        echo "Optim: experimental optimization; use of NaN or +/-Inf not recognized"

        IS_FAST_OPT=1

        OPTIM_OPT_FLAGS="-Ofast -march=native -DARMA_NO_DEBUG"
    elif [[ "${OPTIM_OPT}" == "native" ]]; then
        IS_FAST_OPT=1

        OPTIM_OPT_FLAGS="-O3 -march=native -DARMA_NO_DEBUG"
    else
        OPTIM_OPT_FLAGS="-O3"
    fi

    if [[ "${OPTIM_PARALLEL}" == "y" ]]; then
        echo "Optim: using OpenMP"
        OPTIM_OPT_FLAGS="${OPTIM_OPT_FLAGS} -fopenmp -DOPTIM_USE_OMP"
    fi
fi

OPTIM_WARN_FLAGS="-Wall"

# shared library name and install path

OPTIM_SHLIB_NAME="libmcmc.so"

if [[ !("${OPTIM_BUILD}" == "dev") ]]; then
    if [ -z ${OPTIM_INSTALL_PATH+x} ]; then
        OPTIM_INSTALL_PATH="/usr/local"
    fi
    echo ""
    echo "Optim: install path set to ${OPTIM_INSTALL_PATH}"
fi

if [[ $OSTYPE == darwin* ]] ; then
    if [[ "${OPTIM_BUILD}" == "dev" ]]; then
        OPTIM_SHLIB_FLAGS="-dynamiclib -install_name ${WDIR}/${OPTIM_SHLIB_NAME} -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress"
    else
        OPTIM_SHLIB_FLAGS="-dynamiclib -install_name ${OPTIM_INSTALL_PATH}/lib/${OPTIM_SHLIB_NAME} -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress"
    fi

    OPTIM_BLAS_LAPACK="-framework Accelerate"
elif [[ $OSTYPE == *linux* ]] ; then
    OPTIM_OPT_FLAGS="-fPIC ${OPTIM_OPT_FLAGS}"

    if [[ "${OPTIM_BUILD}" == "dev" ]]; then
        OPTIM_SHLIB_FLAGS="-fPIC -shared -L${WDIR} -Wl,-Bsymbolic-functions -Wl,-z,relro "
    else
        OPTIM_SHLIB_FLAGS="-fPIC -shared -L${OPTIM_INSTALL_PATH}/lib -Wl,-Bsymbolic-functions -Wl,-z,relro"
    fi

    OPTIM_BLAS_LAPACK="-lblas -llapack"
else
    OPTIM_BLAS_LAPACK="-lblas -llapack"
fi

if [[ !(-z ${OPTIM_MATRIX_OPS+x}) ]]; then
    OPTIM_BLAS_LAPACK="${OPTIM_MATRIX_OPS}"
    echo ""
    echo "Optim: BLAS and Lapack libraries set to ${OPTIM_BLAS_LAPACK}"
fi

if [[ "${OPTIM_COVERAGE}" == "y" ]]; then 
    OPTIM_SHLIB_FLAGS="--coverage ${OPTIM_SHLIB_FLAGS}"
else
    OPTIM_SHLIB_FLAGS="${OPTIM_OPT_FLAGS} ${OPTIM_SHLIB_FLAGS}"
fi

if [ "$IS_FAST_OPT" -eq "1" ] && [ "$IS_DARWIN" -eq "1" ] && [ "$APPLE_COMPILER" -eq "0" ]; then
    echo ""
    echo "Optim: To enable AVX features, your compiler will use the Apple LLVM assembler"
    OPTIM_OPT_FLAGS="-Wa,-q ${OPTIM_OPT_FLAGS}"
fi

sed -e "s|@CC@|${CC}|" \
    -e "s|@CXX@|${CXX}|" \
    -e "s|@FC@|${FC}|" \
    -e "s|@ARMA_INCLUDE_PATH@|${ARMA_INCLUDE_PATH}|" \
    -e "s|@OPTIM_BLAS_LAPACK@|${OPTIM_BLAS_LAPACK}|" \
    -e "s|@OPTIM_WARN_FLAGS@|${OPTIM_WARN_FLAGS}|" \
    -e "s|@OPTIM_OPT_FLAGS@|${OPTIM_OPT_FLAGS}|" \
    -e "s|@OPTIM_SHLIB_NAME@|${OPTIM_SHLIB_NAME}|" \
    -e "s|@OPTIM_SHLIB_FLAGS@|${OPTIM_SHLIB_FLAGS}|" \
    -e "s|@OPTIM_INSTALL_PATH@|${OPTIM_INSTALL_PATH}|" \
    Makefile.in > Makefile